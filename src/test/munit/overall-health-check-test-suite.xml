<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
	xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="overall-health-check-test-suite.xml" />
	<munit:test name="health-check-overall-test"
		doc:id="08546e10-9ac3-412d-ab4f-2a28eed4ee62" description="Test">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock request-info-subflow"
				doc:id="68c2d10d-3087-4f38-981f-01f83bca24de" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="request-info-subflow" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[readUrl('classpath://sample_data/request-info.json')]"
						mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="requestInfo"
							value="#[readUrl('classpath://sample_data/request-info.json')]"
							mediaType="application/java" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock server-info-subflow"
				doc:id="46e4b0af-305b-41e6-857b-da77d01622d8" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="server-info-subflow" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[readUrl('classpath://sample_data/server-info.json')]"
						mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="serverInfo"
							value="#[readUrl('classpath://sample_data/server-info.json')]"
							mediaType="application/java" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock jvm-info-subflow"
				doc:id="1ccff28a-6c07-4061-9e64-9324d8ac7432" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="jvm-info-subflow" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[readUrl('classpath://sample_data/jvm-info.json')]"
						mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="jvmInfo"
							value="#[readUrl('classpath://sample_data/jvm-info.json')]"
							mediaType="application/java" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock app-stats-subflow" doc:id="b2f854e1-6f8a-460a-a815-e7c5f96ac44b" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="app-stats-flow" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[readUrl('classpath://sample_data/app-stats-response.json')]"
						mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="appStats"
							value="#[readUrl('classpath://sample_data/app-stats-response.json')]"
							mediaType="application/java" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<flow-ref
				doc:name="call get:\health:health-check-api-config"
				doc:id="1c7e41bf-f9f2-493f-9c57-1d8090f59503"
				name="get:\health:health-check-api-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-equals
				doc:name="Assert Mule Info"
				doc:id="eed12379-e78e-4253-8fb6-3bd79851c14a"
				actual="#[payload.mule]"
				expected='#[{
	"appName": "health-check-api-mule4",
	"runtimeVersion": mule.version,
	"environment": "dev"
}]' message="Mule Info does not match expected"/>
			<munit-tools:assert-that doc:name="Assert that" doc:id="6e48c984-d5b8-4b13-9eb5-801fad990da9" is="#[MunitTools::startsWith('1.8')]" expression="#[payload.jvm.vmVersion]" message="JVM Version does not match expected"/>
			<munit-tools:assert-equals doc:name="Assert OS Name" doc:id="75c396aa-0aa9-4c77-8879-8ac32b967433" actual="#[payload.server.osName]" expected="#['Linux']" message="OS Name does not match expected"/>
			<munit-tools:assert-that doc:name="Assert that" doc:id="3e0830e4-513a-4ec3-ab3e-aad07be58886" is="#[MunitTools::notNullValue()]" expression="#[payload.request.correlationId]"/>
			<munit-tools:assert-equals doc:name="Assert http 200 status" doc:id="b6537869-44a6-4192-97ae-04314d7b047b" actual="#[vars.httpStatus]" expected="#[200]" message="httpStatus does not equal 200"/>
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="d2f5c258-145c-4011-8f67-e8831d2cc872" actual="#[payload.systems[0].status]" expected="#['OK']" message="System 1 status should be OK"/>
		</munit:validation>
	</munit:test>
	<munit:test name="overall-health-exception-handling-test">
    <munit:behavior >
        <munit-tools:mock-when processor="flow-ref" doc:name="throw error when mule-stats-flow">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="request-info-subflow" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="ANY" />
				</munit-tools:then-return>
        </munit-tools:mock-when>
    </munit:behavior>
    <munit:execution >
    		<try>
        <flow-ref name="get:\health:health-check-api-config" doc:name="call /health"/>
        <error-handler >
                <on-error-continue type="ANY" enableNotifications="true" logException="true">
					</on-error-continue>
            </error-handler>
        </try>
    </munit:execution>
		<munit:validation>
			<munit-tools:assert-equals doc:name="Assert 500 HTTP Status" doc:id="cc8d7e9e-1746-41b4-85ad-e2adf4d4c826" actual="#[vars.httpStatus]" expected="#[500]" message="httpStatus not equal to 500"/>
						<munit-tools:assert-equals doc:name="Assert Error Payload" doc:id="a7a074c8-36ad-4967-8d14-4f8902069435" expected='#[%dw 2.0
output application/json
---
{     
	"statusCode" : "500",
	"error" : {    
		"errorType": "MULE:ANY",
		"message" : ""
	}
}]' actual="#[payload]" message="Error payload is not valid"/>
		</munit:validation>
</munit:test>
</mule>
