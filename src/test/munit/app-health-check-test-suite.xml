<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="app-health-check-api-test-suite.xml" />
		<munit:test name="no-dependency-app-flow-test" doc:id="d6a37ce5-1ac9-464f-b864-a85d7b36e113">
		<munit:behavior>
			<munit-tools:mock-when doc:name="Mock when no app dependency" doc:id="bdb72cce-b49a-462d-b819-61b7575fd79e" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="get-app-dependency-subflow" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[""]' mediaType="application/java" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="call app-stats-flow" doc:id="255ccda9-ece9-4b39-9576-51bbf5d134db" name="app-stats-flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert system status is 200" doc:id="c181ded6-fa64-4059-bb26-babac0e15090" actual="#[payload.systemStatus]" expected="#[200]" message="System status is not 200"/>
			<munit-tools:assert-equals doc:name="Assert no systems" doc:id="3d2031fc-0197-4757-aff6-9647e3f94ece" actual="#[sizeOf(payload.backendSystems.systems)]" expected="#[0]" message="There should be no systems"/>

		</munit:validation>
	</munit:test>
		<munit:test name="with-app-dependency-flow-test" doc:id="421fa6b7-c8a8-4b3b-b904-5fcef97f94e8">
		<munit:behavior>
			<munit-tools:mock-when doc:name="Mock Get App Check Flows" doc:id="f463fe5e-0867-41c0-a43a-ebff08c8352c" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="get-app-dependency-subflow" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[['testflow1', 'testflow2']]" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock testflow1 response" doc:id="f3c3ecbd-6878-4042-99c6-998f51751e6d" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="testflow1" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[readUrl('classpath://sample_data/flow-response.json')]" mediaType="application/json" />
					<munit-tools:variables >
						<munit-tools:variable key="result" value="#[readUrl('classpath://sample_data/flow-response.json')]" mediaType="application/java" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock testflow2 response" doc:id="2ab5cf24-a80c-487f-bf3e-f8e266a4d197" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="testflow2" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[readUrl('classpath://sample_data/flow-response.json')]" mediaType="application/json" />
					<munit-tools:variables >
						<munit-tools:variable key="result" value="#[readUrl('classpath://sample_data/flow-response.json')]" mediaType="application/java" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="call app-stats-flow" doc:id="5e12b67a-90ce-4141-a62e-a38f41cce848" name="app-stats-flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert system status is 200" doc:id="42f14bc5-7acf-4357-a1b6-a1231f6bb873" actual="#[payload.systemStatus]" expected="#[200]" message="System status is not 200" />
			<munit-tools:assert-equals doc:name="Assert 2 systems" doc:id="5c4776f1-04de-4eb0-bd92-63c96496642c" actual="#[sizeOf(payload.backendSystems.systems)]" expected="#[2]" message="There should be 2 systems"/>
		
		</munit:validation>
	</munit:test>
	<munit:test name="app-dependency-flowname-mismatch-test" doc:id="ec3f1781-ac5c-4a66-8f74-d0447019e3c9">
		<munit:behavior>
			<munit-tools:mock-when doc:name="Mock when no app dependency" doc:id="cd8ea251-7134-4206-b7b2-95eade34a2ed" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="get-app-dependency-subflow" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[["dummyflow"]]' mediaType="application/java" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="call app-stats-flow" doc:id="463a5a00-e625-42de-a16c-9021f868aa75" name="app-stats-flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert system status is 500" doc:id="04da1574-6f4b-449e-a229-ba34abe3f9b7" actual="#[payload.systemStatus]" expected="#[500]" message="System status is not 500" />
			<munit-tools:assert-equals doc:name="Assert system status is UNKNOWN" doc:id="8fc600f1-8cdb-401a-ad66-3c31d357c7f4" actual="#[payload.backendSystems.systems[0].status]" expected="#['UNKNOWN']" message="Status should be UNKNOWN"/>
		
		</munit:validation>
	</munit:test>
	<munit:test name="health-check-app-test" doc:id="ea690a5b-c6b0-491f-aa49-445a6afc4ca5" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock request-info-subflow" doc:id="9ed5bc9c-2784-48b2-a12c-964051d9da62" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="request-info-subflow" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value="#[readUrl('classpath://sample_data/request-info.json')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="requestInfo" value="#[readUrl('classpath://sample_data/request-info.json')]" mediaType="application/java" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when app-stats" doc:id="0708876e-b303-412e-aecb-49bb934a6394" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="app-stats-flow" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[readUrl('classpath://sample_data/app-stats-response.json')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="appInfo" value="#[readUrl('classpath://sample_data/app-stats-response.json')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="call get:\health\app:health-check-api-config" doc:id="a950893b-2c3d-4b15-b07d-3a1d58c64ada" name="get:\health\app:health-check-api-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert Mule Info" doc:id="f36a1f02-c539-4f7d-abf1-1833eb636f57" actual="#[payload.mule]" expected='#[{
	"appName": "health-check-api-mule4",
	"runtimeVersion": mule.version,
	"environment": "dev"
}]' message="Mule Info does not match expected" />
			<munit-tools:assert-that doc:name="Assert Correlation ID" doc:id="4b88cc58-30e9-45ec-95e4-be70ff0a2d09" is="#[MunitTools::notNullValue()]" expression="#[payload.request.correlationId]" />
			<munit-tools:assert-equals doc:name="Assert 2 systems" doc:id="40ae57e3-a024-43df-8065-efaf29f25474" actual="#[sizeOf(payload.systems)]" expected="#[2]" message="There should be 2 systems" />
		</munit:validation>
	</munit:test>
	<munit:test name="app-health-exception-handling-test">
    <munit:behavior >
        <munit-tools:mock-when processor="flow-ref" doc:name="Mock when throw error">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="app-stats-flow" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="ANY" />
				</munit-tools:then-return>
        </munit-tools:mock-when>
    </munit:behavior>
    <munit:execution >
        <try doc:name="Try" doc:id="ec631826-cdba-4ba2-b6a9-16ee2167fca8" >
				<flow-ref name="get:\health\app:health-check-api-config" doc:name="call /health/app" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="c7ab3750-9d4a-458c-92f0-264f4723da40" type="ANY"/>
				</error-handler>
			</try>
    </munit:execution>
		<munit:validation>
   			<munit-tools:assert-equals doc:name="Assert HTTP 500" doc:id="e7ebde4b-a9d0-4c69-af9d-f4182c524095" actual="#[vars.httpStatus]" expected="#[500]"/>
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="c9de04f2-68e4-4806-b21b-0b95cd8b4e52" actual="#[payload]" expected='#[%dw 2.0
output application/json
---
{     
	"statusCode" : "500",
	"error" : {    
		"errorType": "MULE:ANY",
		"message" : ""
	}
}]'/>
    </munit:validation>
</munit:test>
</mule>
