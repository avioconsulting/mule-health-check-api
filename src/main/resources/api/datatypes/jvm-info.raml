#%RAML 1.0 Library
types:
  jvm:
    properties:
      vmName:
        type: string
        description: The name of the Java Virtual Machine
        example: "Java HotSpot(TM)64 - Bit Server VM"
      vmVendor:
        type: string
        description: Vendor of the Java Virtual Machine
        example: "Oracle Corporation"
      vmVersion:
        type: string
        description: Build Version of the Java Virtual Machine
        example: "25.231 - b11"
      pid:
        type: string
        description: The process ID of the JVM
        example: "15516@AC0084"
      locale:
        type: string
        description: Locale in use by the JVM
        example: "English (United States)"
      memory:
        type: object
        description: Memory usage by the Java Virtual Machine(JVM) . 
        properties:
          heap:
            type: memory
            description:  <h3> 1. Heap </h3>  The Java virtual machine has a <i>heap</i> that is the runtime  data area from which memory for all class instances and arrays  are allocated.  It is created at the Java virtual machine start-up.  Heap memory for objects is reclaimed by an automatic memory management  system which is known as a <i>garbage collector</i>.   <p>The heap may be of a fixed size or may be expanded and shrunk.  The memory for the heap does not need to be contiguous. Returns the current memory usage of the heap that      is used for object allocation.  The heap consists      of one or more memory pools.  The <tt>used</tt>      and <tt>committed</tt> size of the returned memory      usage is the sum of those values of all heap memory pools      whereas the <tt>init</tt> and <tt>max</tt> size of the      returned memory usage represents the setting of the heap      memory which may not be the sum of those of all heap      memory pools.      <p>      The amount of used memory in the returned memory usage      is the amount of memory occupied by both live objects      and garbage objects that have not been collected, if any.           <p>

            
          nonHeap: 
            type: memory
            description: <h3> 2. Non-Heap Memory</h3>  The Java virtual machine manages memory other than the heap  (referred as <i>non-heap memory</i>).  <p> The Java virtual machine has a <i>method area</i> that is shared  among all threads.  The method area belongs to non-heap memory.  It stores per-class structures  such as a runtime constant pool, field and method data, and the code for  methods and constructors.  It is created at the Java virtual machine start-up.  Returns the current memory usage of non-heap memory that      is used by the Java virtual machine.      The non-heap memory consists of one or more memory pools.      The <tt>used</tt> and <tt>committed</tt> size of the      returned memory usage is the sum of those values of      all non-heap memory pools whereas the <tt>init</tt>      and <tt>max</tt> size of the returned memory usage      represents the setting of the non-heap      memory which may not be the sum of those of all non-heap      memory pools.
      threadCount:
        type: threads
      garbageCollection:
        type: array
        description: Garbage collection is the process that the Java virtual machine uses to find and reclaim unreachable objects to free up memory space.
        items:
          type: gc

  memory:
    properties:
      init: 
        type: number
        description: 
        example: 264241152
      used:
        type: number
        description: The mule runtime version the application is running on
        example: 382810496
      committed:
        type: number
        description: The mule runtime version the application is running on
        example: 1030225920
      max:
        type: number
        description: The mule runtime version the application is running on
        example: 3756523520
        
  gc:
    properties:
      gcName:
        type : string
        description: Type of the garbage Collector running in the  Java Virtual Machine(JVM)
        example: "PS MarkSweep"
      collectionCount:
        type : number
        description: number of collections that have occurred.if this value is  <tt>-1</tt> the collection count is undefined for this collector.
        example: 0
      collectionTime:
        type : number
        description: approximate accumulated collection elapsed time in milliseconds
        example: 0    

  threads:
    properties:
      activeThreadCount:
        type : number
        description: number of active threads in  Java Virtual Machine(JVM)
        example: 7
      daemonThreadCount:
        type : number
        description: number of daemon threads in  Java Virtual Machine(JVM)
        example: 3      